-- Add a unique identifier to the FragranticaData table to ensure each row is distinct
ALTER TABLE "FragranticaData" ADD COLUMN "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY;

-- Create the Perfumes fact table
CREATE TABLE "Perfumes" (
	"ID" INT PRIMARY KEY,
    "Name" VARCHAR(255),
    "Gender" VARCHAR(50),
    "Year" INT,
    "Rating Value" DECIMAL(3,2),
    "Rating Count" INT
);

-- Populate the Perfumes table using data from FragranticaData
INSERT INTO "Perfumes" ("ID", "Name", "Gender", "Year", "Rating Value", "Rating Count")
SELECT 
	"ID",
    "Perfume", 
    "Gender", 
    "Year", 
    "Rating Value", 
    "Rating Count"
FROM 
    "FragranticaData";


-- Create the Brand dimension table
CREATE TABLE "Brand" (
    "BrandID" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Name" VARCHAR(255)
);

-- Insert distinct brand names
INSERT INTO "Brand" ("Name")
SELECT DISTINCT "Brand"
FROM "FragranticaData";

-- Add a foreign key column for BrandID to the Perfumes table
ALTER TABLE "Perfumes"
ADD ("BrandID" INT);

-- Map each perfume to its corresponding brand using the ID column
UPDATE "Perfumes" p
SET "BrandID" = (
    SELECT MIN(b."BrandID")
    FROM "Brand" b
    JOIN "FragranticaData" f ON f."Brand" = b."Name"
    WHERE f."ID" = p."ID"
);

-- Add foreign key constraint between Perfumes and Brand
ALTER TABLE "Perfumes"
ADD CONSTRAINT "FK_Perfumes_Brand" FOREIGN KEY ("BrandID") REFERENCES "Brand" ("BrandID");


-- Create the Country dimension table
CREATE TABLE "Country" (
    "CountryID" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Name" VARCHAR(255)
);

-- Insert distinct countries
INSERT INTO "Country" ("Name")
SELECT DISTINCT "Country"
FROM "FragranticaData";

-- Add a foreign key column for CountryID to the Perfumes table
ALTER TABLE "Perfumes"
ADD ("CountryID" INT);

-- Map each perfume to its corresponding country using the ID column
UPDATE "Perfumes" p
SET "CountryID" = (
    SELECT MIN(c."CountryID")
    FROM "Country" c
    JOIN "FragranticaData" f ON f."Country" = c."Name"
    WHERE f."ID" = p."ID"
);

-- Add foreign key constraint between Perfumes and Country
ALTER TABLE "Perfumes"
ADD CONSTRAINT "FK_Perfumes_Country" FOREIGN KEY ("CountryID") REFERENCES "Country" ("CountryID");


-- Create the Perfumer dimension table
CREATE TABLE "Perfumer" (
    "PerfumerID" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Name" VARCHAR(255)
);

-- Insert distinct perfumers from both Perfumer1 and Perfumer2 fields
INSERT INTO "Perfumer" ("Name")
SELECT DISTINCT f."Perfumer1"
FROM "FragranticaData" f
UNION
SELECT DISTINCT f."Perfumer2"
FROM "FragranticaData" f;

-- Create a bridge table for the many-to-many relationship between Perfumes and Perfumers
CREATE TABLE "PerfumePerfumer" (
    "PerfumePerfumerID" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "PerfumeID" INT NOT NULL,
    "PerfumerID" INT NOT NULL,
    FOREIGN KEY ("PerfumeID") REFERENCES "Perfumes" ("ID"),
    FOREIGN KEY ("PerfumerID") REFERENCES "Perfumer" ("PerfumerID")
);

-- Link Perfumes to Perfumer1
INSERT INTO "PerfumePerfumer" ("PerfumeID", "PerfumerID")
SELECT p."ID", per."PerfumerID"
FROM "Perfumes" p
JOIN "FragranticaData" f ON f."ID" = p."ID"
JOIN "Perfumer" per ON per."Name" = f."Perfumer1"
WHERE f."Perfumer1" IS NOT NULL;

-- Link Perfumes to Perfumer2
INSERT INTO "PerfumePerfumer" ("PerfumeID", "PerfumerID")
SELECT p."ID", per."PerfumerID"
FROM "Perfumes" p
JOIN "FragranticaData" f ON f."ID" = p."ID"
JOIN "Perfumer" per ON per."Name" = f."Perfumer2"
WHERE f."Perfumer2" IS NOT NULL;


-- Create the Accord dimension table
CREATE TABLE "Accord" (
    "AccordID" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "AccordName" VARCHAR(255)
);

-- Insert distinct main accords from all five accord columns
INSERT INTO "Accord" ("AccordName")
SELECT DISTINCT f."mainaccord1" FROM "FragranticaData" f WHERE f."mainaccord1" IS NOT NULL
UNION
SELECT DISTINCT f."mainaccord2" FROM "FragranticaData" f WHERE f."mainaccord2" IS NOT NULL
UNION
SELECT DISTINCT f."mainaccord3" FROM "FragranticaData" f WHERE f."mainaccord3" IS NOT NULL
UNION
SELECT DISTINCT f."mainaccord4" FROM "FragranticaData" f WHERE f."mainaccord4" IS NOT NULL
UNION
SELECT DISTINCT f."mainaccord5" FROM "FragranticaData" f WHERE f."mainaccord5" IS NOT NULL;

-- Create a bridge table for the many-to-many relationship between Perfumes and Accords
CREATE TABLE "PerfumeAccord" (
    "PerfumeAccordID" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "PerfumeID" INT NOT NULL,
    "AccordID" INT NOT NULL,
    FOREIGN KEY ("PerfumeID") REFERENCES "Perfumes" ("ID"),
    FOREIGN KEY ("AccordID") REFERENCES "Accord" ("AccordID")
);

-- Link perfumes to each of their main accords
INSERT INTO "PerfumeAccord" ("PerfumeID", "AccordID")
SELECT p."ID", a."AccordID"
FROM "Perfumes" p
JOIN "FragranticaData" f ON f."ID" = p."ID"
JOIN "Accord" a ON a."AccordName" = f."mainaccord1"
WHERE f."mainaccord1" IS NOT NULL;

INSERT INTO "PerfumeAccord" ("PerfumeID", "AccordID")
SELECT p."ID", a."AccordID"
FROM "Perfumes" p
JOIN "FragranticaData" f ON f."ID" = p."ID"
JOIN "Accord" a ON a."AccordName" = f."mainaccord2"
WHERE f."mainaccord2" IS NOT NULL;

INSERT INTO "PerfumeAccord" ("PerfumeID", "AccordID")
SELECT p."ID", a."AccordID"
FROM "Perfumes" p
JOIN "FragranticaData" f ON f."ID" = p."ID"
JOIN "Accord" a ON a."AccordName" = f."mainaccord3"
WHERE f."mainaccord3" IS NOT NULL;

INSERT INTO "PerfumeAccord" ("PerfumeID", "AccordID")
SELECT p."ID", a."AccordID"
FROM "Perfumes" p
JOIN "FragranticaData" f ON f."ID" = p."ID"
JOIN "Accord" a ON a."AccordName" = f."mainaccord4"
WHERE f."mainaccord4" IS NOT NULL;

INSERT INTO "PerfumeAccord" ("PerfumeID", "AccordID")
SELECT p."ID", a."AccordID"
FROM "Perfumes" p
JOIN "FragranticaData" f ON f."ID" = p."ID"
JOIN "Accord" a ON a."AccordName" = f."mainaccord5"
WHERE f."mainaccord5" IS NOT NULL;


-- Add a weighted average rating column to the Perfumes table
ALTER TABLE "Perfumes" ADD ("Rate_Weighted_Perfumes_AVG" DOUBLE);

-- Calculate the weighted average rating for each perfume using Bayesian average
UPDATE "Perfumes" p
SET "Rate_Weighted_Perfumes_AVG" = 
    (
        ("Rating Count" * "Rating Value") / 
        (
            "Rating Count" + (SELECT SUM("Rating Count") FROM "Perfumes") * 0.1
        )
        + 
        (
            (SELECT AVG("Rating Value") FROM "Perfumes") * 
            (SELECT SUM("Rating Count") FROM "Perfumes") * 0.1 / 
            ("Rating Count" + (SELECT SUM("Rating Count") FROM "Perfumes") * 0.1)
        )
    );
